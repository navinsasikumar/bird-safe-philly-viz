{"version":3,"file":"component---src-pages-index-d-3-js-3d431edc190ac4099a14.js","mappings":"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","sources":["webpack://bird-safe-philly-viz/./src/pages/index-d3.js"],"sourcesContent":["/* *\n * References:\n *  https://bl.ocks.org/Qizly/8f6ba236b79d9bb03a80\n *\n */\n\nimport * as React from \"react\"\nimport { graphql } from 'gatsby'\nimport * as D3 from 'd3';\nimport \"../styles/index.css\"\n\n\nconst getDateOfISOWeek = (w, y) => {\n    var simple = new Date(y, 0, 1 + (w - 1) * 7);\n    var dow = simple.getDay();\n    var ISOweekStart = simple;\n    if (dow <= 4)\n        ISOweekStart.setDate(simple.getDate() - simple.getDay() + 1);\n    else\n        ISOweekStart.setDate(simple.getDate() + 8 - simple.getDay());\n    return ISOweekStart;\n};\n\n// markup\nconst IndexPage = (props) => {\n  const observations = props.data.allObs.edges;\n  const groupedObs = props.data.grouped.group;\n\n  const margin = {top: 30, right: 140, bottom: 80, left: 60};\n  const width = 1490 - margin.left - margin.right;\n  const height = 440 - margin.top - margin.bottom;\n  const color =  \"steelblue\";\n\n  const parseDate = D3.timeParse(\"%Y-%m-%d\");\n  const bisectDate = D3.bisector(d => d.weekYear).left;\n  const formatValue = D3.format(\",\");\n  const dateFormatter = D3.timeFormat(\"%m/%d/%y\");\n\n  /*\n  const groupedMap = groupedObs.map(years => {\n    const year = years.fieldValue;\n    const dateCounts = years.group.map(weeks => {\n      const week = weeks.fieldValue;\n      const calcDate = getDateOfISOWeek(week, year);\n      const calcObj = { weekYear: calcDate, count: weeks.totalCount};\n      return calcObj;\n    });\n    return dateCounts;\n  });\n\n  const sortedData = groupedMap.flat().sort((a, b) => a.weekYear - b.weekYear);\n  */\n\n  const groupedMap2 = observations.reduce((r, a) => {\n    r[a.node.observed_on] = r[a.node.observed_on] || [];\n    r[a.node.observed_on].push(a.node);\n    return r;\n  }, Object.create(null));\n\n  const groupedMap3 = Object.keys(groupedMap2).map(e => { return {\n    weekYear: parseDate(e),\n    count: groupedMap2[e].length,\n    species: groupedMap2[e].reduce((r, a) => {\n      r[a.taxon.preferred_common_name] =  r[a.taxon.preferred_common_name] || [];\n      r[a.taxon.preferred_common_name].push(a.taxon);\n      return r;\n    }, Object.create(null))\n  }; });\n\n  const sortedData = groupedMap3.sort((a, b) => a.weekYear - b.weekYear);\n  console.log(sortedData);\n\n  const dates = sortedData.map(e => e.weekYear);\n  const xScale = D3.scaleTime().domain(D3.extent(dates)).range([0, width]);\n\n  const dateGrouping = D3.timeDay;\n  // const dateGrouping = D3.timeMonday // Use this is doing weeekly counts\n  const denseData = xScale.ticks(dateGrouping).map(d => {\n    const found = sortedData.find(e => e.weekYear.getTime() === d.getTime());\n    return found || { weekYear: d, count: 0 };\n  });\n\n  const counts = denseData.map(e => e.count);\n  const yScale = D3.scaleLinear().domain(D3.extent(counts)).range([height, 0]);\n\n  const linePath = D3\n    .line()\n    .x(d => xScale(d.weekYear))\n    .y(d => yScale(d.count))\n    .curve(D3.curveMonotoneX)\n\n  const xAxis = D3.axisBottom()\n    .scale(xScale)\n\n  const yAxis = D3.axisLeft()\n    .scale(yScale)\n\n  const mainRef = React.useRef();\n  const svgRef = React.useRef();\n  const tooltipRef = React.useRef();\n  const detailsRef = React.useRef();\n\n  React.useEffect(() => {\n    const tooltip = D3.select(tooltipRef.current)\n      .attr(\"class\", \"tooltip\")\n      .style(\"position\", \"absolute\")\n      .style(\"visibility\", \"hidden\");\n\n    const details = D3.select(detailsRef.current)\n      .attr(\"class\", \"details\")\n\n    const svg = D3.select(svgRef.current)\n      .append('g')\n      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n      .call(xAxis);\n\n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(0, 0)\")\n      .attr(\"class\", \"y axis\")\n      .call(yAxis)\n      .append(\"text\")\n      .attr(\"transform\", \"rotate(-90)\")\n      .attr(\"y\", 6)\n      .attr(\"dy\", \".71em\")\n      .style(\"text-anchor\", \"end\")\n      .text(\"Count\");\n\n    svg\n      .append('path')\n      .datum(denseData)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", color)\n      .attr(\"stroke-width\", 3)\n      .attr(\"d\", linePath);\n\n    const focus = svg.append('g')\n      .attr(\"class\", \"focus\")\n      .style(\"display\", \"none\");\n\n    focus.append(\"circle\")\n      .attr(\"r\", 5);\n\n    focus.append(\"rect\")\n      .attr(\"class\", \"tooltip\")\n      .attr(\"width\", 80)\n      .attr(\"height\", 50)\n      .attr(\"x\", 10)\n      .attr(\"y\", -22)\n      .attr(\"rx\", 4)\n      .attr(\"ry\", 4);\n\n    focus.append(\"text\")\n      .attr(\"class\", \"tooltip-date\")\n      .attr(\"x\", 18)\n      .attr(\"y\", -2);\n\n    focus.append(\"text\")\n      .attr(\"x\", 18)\n      .attr(\"y\", 18)\n      .text(\"Count:\");\n\n    focus.append(\"text\")\n      .attr(\"class\", \"tooltip-count\")\n      .style('font-weight', 'bold')\n      .attr(\"x\", 60)\n      .attr(\"y\", 18);\n\n    svg.append(\"rect\")\n      .attr(\"class\", \"overlay\")\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .on(\"mouseover\", function() { focus.style(\"display\", null); })\n      .on(\"mouseout\", function() { focus.style(\"display\", \"none\"); })\n      .on(\"mousemove\", mousemove);\n\n    function mousemove(event) {\n      const x0 = xScale.invert(D3.pointer(event)[0]);\n      const i = bisectDate(denseData, x0, 1);\n      const d0 = denseData[i - 1];\n      const d1 = denseData[i];\n      const d = x0 - d0.weekYear > d1.weekYear - x0 ? d1 : d0;\n\n      focus.attr(\"transform\", \"translate(\" + xScale(d.weekYear) + \",\" + yScale(d.count) + \")\");\n      focus.select(\".tooltip-date\").text(dateFormatter(d.weekYear));\n      focus.select(\".tooltip-count\").text(formatValue(d.count));\n\n      const speciesLists = d.count > 0 && Object.keys(d.species)\n        .sort((a, b) => d.species[b].length - d.species[a].length)\n        .reduce((r, a) => r += `${a}: ${d.species[a].length}, `, \"\");\n      const speciesText = d.count > 0\n        ? (`Species: ${speciesLists.replace(/(,\\s*$)/g, \"\")}`)\n        : \"\";\n\n      details.html(\"\")\n        .append('div')\n        .html(`\n          <h5>${dateFormatter(d.weekYear)}</h5>\n          <p>Total: ${d.count}</p>\n          <p>${speciesText}</p>\n        `);\n    }\n\n    // Legend\n    svg.append(\"circle\").attr(\"cx\", 0).attr(\"cy\", height + 30 ).attr(\"r\", 6).style(\"fill\", color);\n    svg.append(\"text\").attr(\"x\", 20).attr(\"y\", height + 30).text(\"Total observations in project\").style(\"font-size\", \"15px\").attr(\"alignment-baseline\",\"middle\")\n\n  }, [mainRef.current]);\n\n\n  return (\n    <main ref={mainRef}>\n      <title>Bird Safe Philly Data Viz</title>\n      <h1>Bird Safe Philly Data Viz</h1>\n\n      <h5 style={{\"margin-left\": margin.left - 20, \"margin-bottom\": 0}}>Daily Window Strikes</h5>\n      <svg width={width + margin.left + margin.right} height={height + margin.top + margin.bottom} ref={svgRef}>\n      </svg>\n      <div ref={detailsRef}></div>\n\n      <div>\n        {observations.map((obs, i) => {\n          const obsData = obs.node;\n          return (\n            <div key={i}>\n              <p>Species: {obsData.taxon.preferred_common_name}</p>\n            </div>\n          )\n        })}\n      </div>\n    </main>\n  );\n}\n\nexport default IndexPage\n\nexport const query = graphql`\n  query ObservationQuery {\n    grouped: allObservation(filter: {observed_on_details: {year: {gte: 2021}}}) {\n      totalCount\n      group(field: observed_on_details___year) {\n        totalCount\n        group(field: observed_on_details___week) {\n          totalCount\n          fieldValue\n        }\n        fieldValue\n      }\n    }\n    allObs: allObservation(filter: {observed_on: {gte: \"2021-01-01\"}}) {\n      edges {\n        node {\n          observation_id\n          observed_on\n          observed_on_details {\n            date\n            week\n            month\n            hour\n            year\n            day\n          }\n          place_ids\n          taxon {\n            ancestor_ids\n            name\n            preferred_common_name\n          }\n          geojson {\n            coordinates\n            type\n          }\n          user\n        }\n      }\n    }\n  }\n`;\n\n// console.log(query);\n\n\n/*\nexport const query = graphql`\n  query ObservationQuery {\n    allObservation(filter: {observed_on: {gte: \"2020-01-01\"}}) {\n      edges {\n        node {\n          observation_id\n          observed_on\n          observed_on_details {\n            date\n            week\n            month\n            hour\n            year\n            day\n          }\n          place_ids\n          taxon {\n            ancestor_ids\n            name\n            preferred_common_name\n          }\n          geojson {\n            coordinates\n            type\n          }\n          user\n        }\n      }\n    }\n  }\n`; */\n"],"names":["props","observations","data","allObs","edges","margin","grouped","group","width","height","color","parseDate","D3","bisectDate","d","weekYear","left","formatValue","dateFormatter","groupedMap2","reduce","r","a","node","observed_on","push","Object","create","sortedData","keys","map","e","count","length","species","taxon","preferred_common_name","sort","b","console","log","dates","xScale","domain","range","dateGrouping","denseData","ticks","find","getTime","counts","yScale","linePath","x","y","curve","xAxis","scale","yAxis","mainRef","React","svgRef","tooltipRef","detailsRef","current","attr","style","details","svg","append","call","text","datum","focus","on","event","x0","invert","i","d0","d1","select","speciesLists","speciesText","replace","html","ref","obs","obsData","key"],"sourceRoot":""}